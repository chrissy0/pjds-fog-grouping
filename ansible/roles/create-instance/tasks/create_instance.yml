- name: echo state
  debug: msg="Creating instance {{ passed_vm_name }}"

- name: creating a disk
  gcp_compute_disk:
     name: '{{ passed_vm_name }}-disk-instance'
     size_gb: 10
     source_image: 'projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts'
     zone: "{{ zone }}"
     project: "{{ gcp_project }}"
     auth_kind: "{{ gcp_cred_kind }}"
     service_account_file: "{{ gcp_cred_file }}"
     scopes:
       - https://www.googleapis.com/auth/compute
     state: present
  register: disk
- name: creating an address
  gcp_compute_address:
     name: '{{ passed_vm_name }}-address-instance'
     region: "{{ region }}"
     project: "{{ gcp_project }}"
     auth_kind: "{{ gcp_cred_kind }}"
     service_account_file: "{{ gcp_cred_file }}"
     scopes:
       - https://www.googleapis.com/auth/compute
     state: present
  register: address
- name: creating an instance
  gcp_compute_instance:
     state: present
     name: "{{ passed_vm_name }}"
     machine_type: n1-standard-1
     disks:
       - auto_delete: true
         boot: true
         source: "{{ disk }}"
     network_interfaces:
         - network: null # use default
           access_configs:
             - name: 'External NAT'
               nat_ip: "{{ address }}"
               type: 'ONE_TO_ONE_NAT'
     zone: "{{ zone }}"
     project: "{{ gcp_project }}"
     auth_kind: "{{ gcp_cred_kind }}"
     service_account_file: "{{ gcp_cred_file }}"
     scopes:
       - https://www.googleapis.com/auth/compute
     metadata: {"enable-oslogin": TRUE}
  register: instance
#   - name: create a firewall
#     gcp_compute_firewall:
#       name: nginx
#       allowed:
#         - ip_protocol: tcp
#           ports:
#             - '80'
#       project: "{{ gcp_project }}"
#       auth_kind: "{{ gcp_cred_kind }}"
#       service_account_file: "{{ gcp_cred_file }}"
#       state: present

- name: Waiting for SSH to come up
  wait_for: host={{ address.address }} port=22 delay=3 timeout=60

- name: Adding host to all
  add_host: hostname={{ address.address }} groupname=all


#- name: Manage new instances
#  vars:
#      ansible_ssh_private_key_file: "{{ playbook_dir | dirname }}/credentials/ssh-key-ansible-sa"
#  hosts: new_instances
#  connection: ssh
#  remote_user: sa_110764242531759494195
#  become: True
#  roles:
#    - sqlite